---
title: "Ideas for physical classifications of river networks"
date: "06.06.2024"
author: "Leo Helling"
title-slide-attributes:
  data-background-color: "#023e8a"
---

```{r load data}
#| echo: false
#| output: false

library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.extras)
source("~/repositories/mapdo_progress/src/f_classification.R")
load("~/repositories/mapdo_progress/data/network_dgo.rda")

axis <- network_dgo

```

## first ideas

-   Dominant land use
-   Urban pressures
-   Agricultural pressure
-   Confinement
-   Stream Power
-   Sinuosity
-   Channel Pattern


## Topography

based on height and slope, e.g.

- plaines de basse altitude (\> 0 m & \< 5 % slope)
- plaines de moyenne altitude (\> 300 m & \< 5 % slope)
- plaines de montagne (\> 1000 m & \< 5 % slope)
- pentes de basse altitude (\> 0 m & \> 5 % slope)
- pentes de moyenne altitude (\> 300 m & \> 5 % slope)
- pentes de montagne (\> 1000 m & \> 5 % slope)

```{r plot topographical classes}
#| echo: false
#| warning: false


df_classified_pc <- autoclass_pressures_pc(axis)

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_topo, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_topo), labels = unique(df_classified_pc$class_topo))
```


## Dominant land use

land use category with highest share of valley bottom area.

-   urban areas + infrastructure

-   agricultural land

-   natural land (forest & grassland)

```{r plot dominant land use}
#| echo: false
#| warning: false

df_dom_lu <- autoclass_dom_landuse(axis)


leaflet::leaflet(df_dom_lu) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_dom_lu$color, opacity = 1) |> 
  addLegend(color = unique(df_dom_lu$color), labels = unique(df_dom_lu$metric_max))
```

## Urban pressure

4 classes based on degree of urban landuse (could also be accumulated urban landuse from upstream areas!)

-   \>70 % highly urbanised
-   \>40 % urbanised
-   \>10 % moderately urbanised
-   \>0 % no urban land

```{r plot urban land use}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_urban, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_urban), labels = unique(df_classified_pc$class_urban))

```

## Agricultural impact

-   \>70 % strong agricultural impact
-   \>40 % high agricultural impact
-   \>10 % moderate agricultural impact
-   \>0 % no agricultural impact at all

```{r plot agricultural impact}
#| echo: false
#| warning: false


leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_crops, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_crops), labels = unique(df_classified_pc$class_crops))
```

## Natural landuse

-   \>70 % very strong natural landuse
-   \>40 % strong natural landuse
-   \>10 % moderate natural landuse
-   \>0 % no natural landuse

```{r plot natural impact}
#| echo: false
#| warning: false


leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_natural, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_natural), labels = unique(df_classified_pc$class_natural))
```


## Confinement

Proposed confinement index from 0-1 divided into 4 classes:

-   strongly confined: \> 0
-   confined: \> 0.25
-   weakly confined \> 0.5
-   unconfined \> 0.75

based on the ratio between the active channel width and the valley bottom width

```{r plot confinement classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_confinement, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_confinement), labels = unique(df_classified_pc$class_confinement))
```


## Habitat Connectivity

based on share of connected corridor (includes active channel, natural corridor and semi-natural corridors) from valley bottom
OR based on share of connected corridor from valley bottom excluding the active channel area
OR based on the ratio of connected corridor width to active channel width !

Example based on connected corridor share:

```{r plot habitat classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_habitat, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_habitat), labels = unique(df_classified_pc$class_habitat))
```


## Active Channel Space

Proposed confinement index from 0-1 divided into 4 classes:

-   abundant space: \> 70
-   space: \> 40
-   moderate space \> 10
-   confined \> 0

based on the ratio between the active channel width and the valley bottom width

```{r plot active channel classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_ac, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_ac), labels = unique(df_classified_pc$class_ac))
```


## Gravel Bars presence

Absent, occasional, frequent

```{r plot gravel classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_gravel, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_gravel), labels = unique(df_classified_pc$class_gravel))
```


## Water channel size evolution

*indicate channel size reductions on the stream network downwards* 

 - grandissant
 - stable
 - diminuant
 
```{r plot water channel size classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_wsize, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_wsize), labels = unique(df_classified_pc$class_wsize)) |> 
  leaflet.extras::addSearchOSM(options = searchOptions()) 
```

## Stream Power

***Idea:** get discharge values from RHT network and calculate Streampower for each segment:*
  
  $$
  \Omega=\rho g Q S
$$
  
  `Ω` is the stream power, `ρ` is the density of water (1000 kg/m^3^), `g` is gravitational acceleration (9.8 m/s^2^ ), `Q` is Discharge (m^3^/s), and `S` is the channel slope.


## Sinuosity


## Channel Pattern


## Bed Material

based on grainsize distribution


## Flow regime

perennial or intermittent?


## Slope Gradient

low, medium, high


## Fragmentation

based on barriers present upstream


## Integrated Approach

An integrated classification approach involves combining multiple metrics to create composite classes. For example:

Geomorpho-Ecological Classification: Combining geomorphological features with ecological conditions (e.g., highland forested streams, lowland agricultural streams).

Hydro-Morphological Classification: Integrating hydrological regime with physical channel characteristics (e.g., perennial wide-shallow streams, ephemeral narrow-deep streams).
