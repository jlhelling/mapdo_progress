---
title: "Ideas for physical classifications of river networks"
date: "06.06.2024"
author: "Leo Helling"
title-slide-attributes:
  data-background-color: "#023e8a"
---

```{r load data}
#| echo: false
#| output: false

library(tidyverse)
library(sf)
library(leaflet)
library(leaflet.extras)
source("~/repositories/mapdo_progress/src/f_classification.R")
load("~/repositories/mapdo_progress/data/network_dgo.rda")

axis <- network_dgo

```

## first ideas

-   Dominant land use
-   Urban pressures
-   Agricultural pressure
-   Confinement
-   Stream Power
-   Sinuosity
-   Channel Pattern

## overview table

```{r table create}
#| echo: false
#| warning: false

library(reactable)

df <- tibble(
  class = c(
    "Nombre de Strahler",
    "Topographie",
    "Utilisation dominante des sols",
    "Pression urbaine",
    "Pression agricole",
    "Utilisation naturelle des sols",
    "Confinement de la bande active",
    "Connectivité des habitats riverains",
    "Présence de bancs de galets",
    "Évolution de la taille du chenal de l'eau"
  ),
  description = c(
    "Répresent la complexité du réseaux hdrographique. Le nombre de Strahler est de 1 pour tout cours d'eau entre sa source et sa première confluence et mont avec chaque confluence.",
    "une classification simple basée sur la pente et la hauteur",
    "indique la classe d'utilisation des sols la plus dominante dans la zone du fond de vallée de chaque segment de cours d'eau",
    "indique la part de la couverture urbaine dans la zone du fond de vallée de chaque segment de cours d'eau",
    "indique la part de l'utilisation des terres agricoles dans la zone du fond de vallée de chaque segment de cours d'eau",
    "indique la part de l'utilisation naturelle des sols dans la zone du fond de vallée de chaque tronçon fluvial",
    "L'indice de confinement proposé, de 0 à 1, est divisé en 4 classes : \n
      - espace abondant : > 70 \n
      - espace : > 40 \n
      - espace modéré : > 10 \n
      - confiné : 0 \n
      basé sur le rapport entre la largeur du canal actif et la largeur du fond de la vallée.",
    "basé sur la surface du corridor connecté (comprenant le canal actif, le corridor naturel et les corridors semi-naturels) à partir du fond de la vallée OU basé sur la surface du corridor connecté à partir du fond de la vallée, à l'exclusion de la zone du canal actif OU basé sur le rapport entre la largeur du corridor connecté et la largeur du canal actif !",
    "la présence de bancs de galets : Absent, occasionnel, fréquent",
    "*indique une réduction de la taille des chenaux sur le réseau de cours d'eau vers le bas* \n
      - grandissant \n
      - stable \n
      - diminuant \n"
  )
)

table <- reactable(df, 
                   columns = list(
                     class = colDef(name = "Style", sortable = FALSE),
                     description = colDef(show = FALSE)  # Hide the detail column in the main view
                   ),
                   details = function(index) {
                     htmltools::div(
                       style = "padding: 10px; margin-left: 84px; white-space: pre-wrap;",  # Add text indentation
                       # htmltools::strong("Details: "),
                       df$description[index]  # Display the detail column for the specific row
                     )
                   }, selection = "single", defaultSelected = 1, onClick = "select")
table

```

### Procedure

- click on region: table is shown with strahler nombre selected
- subsequently, network with sld-styling from class is added to map
- 


## Topography

based on height and slope, e.g.

-   plaines de basse altitude (\> 0 m & \< 5 % slope)
-   plaines de moyenne altitude (\> 300 m & \< 5 % slope)
-   plaines de montagne (\> 1000 m & \< 5 % slope)
-   pentes de basse altitude (\> 0 m & \> 5 % slope)
-   pentes de moyenne altitude (\> 300 m & \> 5 % slope)
-   pentes de montagne (\> 1000 m & \> 5 % slope)

```{r plot topographical classes}
#| echo: false
#| warning: false


df_classified_pc <- autoclass_pressures_pc(axis)

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_topo, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_topo), labels = unique(df_classified_pc$class_topo))
```

## Dominant land use

land use category with highest share of valley bottom area.

-   urban areas + infrastructure

-   agricultural land

-   natural land (forest & grassland)

```{r plot dominant land use}
#| echo: false
#| warning: false

df_dom_lu <- autoclass_dom_landuse(axis)


leaflet::leaflet(df_dom_lu) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_dom_lu$color, opacity = 1) |> 
  addLegend(color = unique(df_dom_lu$color), labels = unique(df_dom_lu$metric_max))
```

## Urban pressure

4 classes based on degree of urban landuse (could also be accumulated urban landuse from upstream areas!)

-   \>70 % highly urbanised
-   \>40 % urbanised
-   \>10 % moderately urbanised
-   \>0 % no urban land

```{r plot urban land use}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_urban, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_urban), labels = unique(df_classified_pc$class_urban))

```

## Agricultural impact

-   \>70 % strong agricultural impact
-   \>40 % high agricultural impact
-   \>10 % moderate agricultural impact
-   \>0 % no agricultural impact at all

```{r plot agricultural impact}
#| echo: false
#| warning: false


leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_crops, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_crops), labels = unique(df_classified_pc$class_crops))
```

## Natural landuse

-   \>70 % very strong natural landuse
-   \>40 % strong natural landuse
-   \>10 % moderate natural landuse
-   \>0 % no natural landuse

```{r plot natural impact}
#| echo: false
#| warning: false


leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_natural, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_natural), labels = unique(df_classified_pc$class_natural))
```

## Confinement

Proposed confinement index from 0-1 divided into 4 classes:

-   strongly confined: \> 0
-   confined: \> 0.25
-   weakly confined \> 0.5
-   unconfined \> 0.75

based on the ratio between the active channel width and the valley bottom width

```{r plot confinement classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_confinement, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_confinement), labels = unique(df_classified_pc$class_confinement))
```

## Habitat Connectivity

based on share of connected corridor (includes active channel, natural corridor and semi-natural corridors) from valley bottom OR based on share of connected corridor from valley bottom excluding the active channel area OR based on the ratio of connected corridor width to active channel width !

Example based on connected corridor share:

```{r plot habitat classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_habitat, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_habitat), labels = unique(df_classified_pc$class_habitat))
```

## Active Channel Space

Proposed confinement index from 0-1 divided into 4 classes:

-   abundant space: \> 70
-   space: \> 40
-   moderate space \> 10
-   confined \> 0

based on the ratio between the active channel width and the valley bottom width

```{r plot active channel classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_ac, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_ac), labels = unique(df_classified_pc$class_ac))
```

## Gravel Bars presence

Absent, occasional, frequent

```{r plot gravel classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_gravel, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_gravel), labels = unique(df_classified_pc$class_gravel))
```

## Water channel size evolution

*indicate channel size reductions on the stream network downwards*

-   grandissant
-   stable
-   diminuant

```{r plot water channel size classes}
#| echo: false
#| warning: false

leaflet::leaflet(df_classified_pc) |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolylines(color = df_classified_pc$color_wsize, opacity = 1) |> 
  addLegend(color = unique(df_classified_pc$color_wsize), labels = unique(df_classified_pc$class_wsize)) |> 
  leaflet.extras::addSearchOSM(options = searchOptions()) 
```

## Stream Power

***Idea:** get discharge values from RHT network and calculate Streampower for each segment:*

$$
\Omega=\rho g Q S
$$

`Ω` is the stream power, `ρ` is the density of water (1000 kg/m^3^), `g` is gravitational acceleration (9.8 m/s^2^ ), `Q` is Discharge (m^3^/s), and `S` is the channel slope.

## Sinuosity

## Channel Pattern

## Bed Material

based on grainsize distribution

## Flow regime

perennial or intermittent?

## Slope Gradient

low, medium, high

## Fragmentation

based on barriers present upstream

## Integrated Approach

An integrated classification approach involves combining multiple metrics to create composite classes. For example:

Geomorpho-Ecological Classification: Combining geomorphological features with ecological conditions (e.g., highland forested streams, lowland agricultural streams).

Hydro-Morphological Classification: Integrating hydrological regime with physical channel characteristics (e.g., perennial wide-shallow streams, ephemeral narrow-deep streams).
